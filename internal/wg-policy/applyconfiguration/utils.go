// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfiguration

import (
	internal "github.com/statnett/image-scanner-operator/internal/wg-policy/applyconfiguration/internal"
	reportsxk8siov1beta2 "github.com/statnett/image-scanner-operator/internal/wg-policy/applyconfiguration/reports.x-k8s.io/v1beta2"
	wgpolicyk8siov1alpha2 "github.com/statnett/image-scanner-operator/internal/wg-policy/applyconfiguration/wgpolicyk8s.io/v1alpha2"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	testing "k8s.io/client-go/testing"
	v1beta2 "sigs.k8s.io/wg-policy-prototypes/policy-report/pkg/api/reports.x-k8s.io/v1beta2"
	v1alpha2 "sigs.k8s.io/wg-policy-prototypes/policy-report/pkg/api/wgpolicyk8s.io/v1alpha2"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=reports.x-k8s.io, Version=v1beta2
	case v1beta2.SchemeGroupVersion.WithKind("ClusterPolicyReport"):
		return &reportsxk8siov1beta2.ClusterPolicyReportApplyConfiguration{}
	case v1beta2.SchemeGroupVersion.WithKind("Limits"):
		return &reportsxk8siov1beta2.LimitsApplyConfiguration{}
	case v1beta2.SchemeGroupVersion.WithKind("PolicyReport"):
		return &reportsxk8siov1beta2.PolicyReportApplyConfiguration{}
	case v1beta2.SchemeGroupVersion.WithKind("PolicyReportConfiguration"):
		return &reportsxk8siov1beta2.PolicyReportConfigurationApplyConfiguration{}
	case v1beta2.SchemeGroupVersion.WithKind("PolicyReportResult"):
		return &reportsxk8siov1beta2.PolicyReportResultApplyConfiguration{}
	case v1beta2.SchemeGroupVersion.WithKind("PolicyReportSummary"):
		return &reportsxk8siov1beta2.PolicyReportSummaryApplyConfiguration{}

		// Group=wgpolicyk8s.io, Version=v1alpha2
	case v1alpha2.SchemeGroupVersion.WithKind("ClusterPolicyReport"):
		return &wgpolicyk8siov1alpha2.ClusterPolicyReportApplyConfiguration{}
	case v1alpha2.SchemeGroupVersion.WithKind("PolicyReport"):
		return &wgpolicyk8siov1alpha2.PolicyReportApplyConfiguration{}
	case v1alpha2.SchemeGroupVersion.WithKind("PolicyReportResult"):
		return &wgpolicyk8siov1alpha2.PolicyReportResultApplyConfiguration{}
	case v1alpha2.SchemeGroupVersion.WithKind("PolicyReportSummary"):
		return &wgpolicyk8siov1alpha2.PolicyReportSummaryApplyConfiguration{}

	}
	return nil
}

func NewTypeConverter(scheme *runtime.Scheme) *testing.TypeConverter {
	return &testing.TypeConverter{Scheme: scheme, TypeResolver: internal.Parser()}
}
